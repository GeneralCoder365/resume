Folder Structure
--------------------------------------------------
resume/
    .gitignore
    package.json
    postcss.config.js
    README.md
    tailwind.config.js
    tsconfig.json
    vercel.json
        .git/
        .github/
            scripts/
            workflows/
        build/
            asset-manifest.json
            index.html
            manifest.json
            robots.txt
        public/
            index.html
            manifest.json
            robots.txt
        src/
            global.d.ts
            index.css
            index.tsx
            react-app-env.d.ts
            reportWebVitals.ts
            setupTests.ts
            components/
                App.css
                App.test.tsx
                App.tsx
                ResumeMeasureWrapper.tsx
                resume/
                    AdditionalQualifications.tsx
                    Education.tsx
                    Experience.tsx
                    index.ts
                    Projects.tsx
                    Publications.tsx
                    Resume.tsx
                    Section.tsx
                    Skills.tsx
                utils/
                    Controls.tsx
                    customPDFGenerator.ts
                    themeStyles.tsx
            data/
                resumeData.ts
                smallResumeData.ts
            types/
                resume.ts


File Contents
--------------------------------------------------


.\.gitignore
File type: 
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
pdfs/raw*

--------------------------------------------------
File End
--------------------------------------------------


.\package.json
File type: .json
{
    "name": "resume",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "@react-pdf/renderer": "^4.1.5",
        "@testing-library/jest-dom": "^5.17.0",
        "@testing-library/react": "^13.4.0",
        "@testing-library/user-event": "^13.5.0",
        "@types/jest": "^27.5.2",
        "@types/node": "^16.18.105",
        "@types/react": "^18.3.4",
        "@types/react-dom": "^18.3.0",
        "jszip": "^3.10.1",
        "lucide-react": "^0.435.0",
        "puppeteer": "^23.11.1",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-icons": "^5.4.0",
        "react-scripts": "5.0.1",
        "react-to-pdf": "^1.0.1",
        "resume": "file:",
        "typescript": "^4.9.5",
        "web-vitals": "^2.1.4"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": [
            "react-app",
            "react-app/jest"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    },
    "devDependencies": {
        "autoprefixer": "^10.4.20",
        "postcss": "^8.4.41",
        "tailwindcss": "^3.4.10"
    }
}


--------------------------------------------------
File End
--------------------------------------------------


.\postcss.config.js
File type: .js
module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
}


--------------------------------------------------
File End
--------------------------------------------------


.\README.md
File type: .md
# Spring 2025 Resume


--------------------------------------------------
File End
--------------------------------------------------


.\tailwind.config.js
File type: .js
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
        "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
}

--------------------------------------------------
File End
--------------------------------------------------


.\tsconfig.json
File type: .json
{
    "compilerOptions": {
        "target": "es5",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "noFallthroughCasesInSwitch": true,
        "module": "esnext",
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        "baseUrl": "src",
        "paths": {
            "@/*": ["*"],
            "@components/*": ["components/*"],
            "@utils/*": ["utils/*"],
            "@types/*": ["types/*"],
            "@data/*": ["data/*"]
        }
    },
    "include": ["src"]
}

--------------------------------------------------
File End
--------------------------------------------------


.\vercel.json
File type: .json
{
    "ignoreBuildStep": {
        "files": ["pdfs/**", ".github/**", "README.md", "build/**"]
    }
}

--------------------------------------------------
File End
--------------------------------------------------


.\build\asset-manifest.json
File type: .json
{
  "files": {
    "main.css": "/static/css/main.5ef98920.css",
    "main.js": "/static/js/main.3dcea4e8.js",
    "static/js/213.bc2cca19.chunk.js": "/static/js/213.bc2cca19.chunk.js",
    "static/js/732.e48a4ec1.chunk.js": "/static/js/732.e48a4ec1.chunk.js",
    "static/js/453.f19e9853.chunk.js": "/static/js/453.f19e9853.chunk.js",
    "index.html": "/index.html",
    "main.5ef98920.css.map": "/static/css/main.5ef98920.css.map",
    "main.3dcea4e8.js.map": "/static/js/main.3dcea4e8.js.map",
    "213.bc2cca19.chunk.js.map": "/static/js/213.bc2cca19.chunk.js.map",
    "732.e48a4ec1.chunk.js.map": "/static/js/732.e48a4ec1.chunk.js.map",
    "453.f19e9853.chunk.js.map": "/static/js/453.f19e9853.chunk.js.map"
  },
  "entrypoints": [
    "static/css/main.5ef98920.css",
    "static/js/main.3dcea4e8.js"
  ]
}

--------------------------------------------------
File End
--------------------------------------------------


.\build\index.html
File type: .html
<!doctype html><html lang="en"><head><meta charset="utf-8"/><link rel="icon" href="/favicon.ico"/><meta name="viewport" content="width=device-width,initial-scale=1"/><meta name="theme-color" content="#000000"/><meta name="description" content="Interactive Resume Application"/><link rel="apple-touch-icon" href="/logo192.png"/><link rel="manifest" href="/manifest.json"/><title>Ainesh Chatterjee | Resume</title><script defer="defer" src="/static/js/main.3dcea4e8.js"></script><link href="/static/css/main.5ef98920.css" rel="stylesheet"></head><body><noscript>You need to enable JavaScript to run this app.</noscript><div id="root"></div></body></html>

--------------------------------------------------
File End
--------------------------------------------------


.\build\manifest.json
File type: .json
{
    "short_name": "ain3sh resume",
    "name": "ain3sh resume",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "image/x-icon"
        },
        {
            "src": "logo192.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "logo512.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
}

--------------------------------------------------
File End
--------------------------------------------------


.\build\robots.txt
File type: .txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--------------------------------------------------
File End
--------------------------------------------------


.\public\index.html
File type: .html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Interactive Resume Application"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Ainesh Chatterjee | Resume</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

--------------------------------------------------
File End
--------------------------------------------------


.\public\manifest.json
File type: .json
{
    "short_name": "ain3sh resume",
    "name": "ain3sh resume",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "image/x-icon"
        },
        {
            "src": "logo192.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "logo512.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
}

--------------------------------------------------
File End
--------------------------------------------------


.\public\robots.txt
File type: .txt
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--------------------------------------------------
File End
--------------------------------------------------


.\src\global.d.ts
File type: .ts
import { ThemeMode } from './utils/themeStyles';

declare global {
    interface Window {
        __REACT_THEME__?: ThemeMode;
        fs: {
        readFile(path: string, options?: { encoding?: string }): Promise<Uint8Array | string>;
        };
    }
}

--------------------------------------------------
File End
--------------------------------------------------


.\src\index.css
File type: .css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base styles that complement Tailwind */
body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Global transition for theme changes */
* {
    transition: background-color 0.2s ease, color 0.15s ease;
}

/* Theme classes handled by themeStyles.ts */
.light {
    background-color: #ffffff;
    color: black;
}

.dark {
    background-color: #17191a;
    color: white;
}

--------------------------------------------------
File End
--------------------------------------------------


.\src\index.tsx
File type: .tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './components/App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
    document.getElementById('root') as HTMLElement
);

root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

reportWebVitals();

--------------------------------------------------
File End
--------------------------------------------------


.\src\react-app-env.d.ts
File type: .ts
/// <reference types="react-scripts" />


--------------------------------------------------
File End
--------------------------------------------------


.\src\reportWebVitals.ts
File type: .ts
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--------------------------------------------------
File End
--------------------------------------------------


.\src\setupTests.ts
File type: .ts
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


--------------------------------------------------
File End
--------------------------------------------------


.\src\components\App.css
File type: .css
.App {
    text-align: center;
}

.App-logo {
    height: 40vmin;
    pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
    .App-logo {
        animation: App-logo-spin infinite 20s linear;
    }
}

.App-header {
    background-color: #282c34;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: calc(10px + 2vmin);
    color: white;
}

.App-link {
    color: #61dafb;
}

@keyframes App-logo-spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}


--------------------------------------------------
File End
--------------------------------------------------


.\src\components\App.test.tsx
File type: .tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\App.tsx
File type: .tsx
import { useRef, useState, useEffect } from 'react';
import '../index.css';
import ResumeMeasureWrapper from './ResumeMeasureWrapper';
import Controls from './utils/Controls';
import { generatePDF } from './utils/customPDFGenerator';
import { ThemeMode } from './utils/themeStyles';
import resumeData from '../data/resumeData';
import smallResumeData from '../data/smallResumeData';


const App = () => {
    const targetRef = useRef<HTMLDivElement>(null);
    const [isDarkMode, setIsDarkMode] = useState(true); // default to dark mode
    const [isFullResume, setIsFullResume] = useState(true); // default to full resume
    const [isCompressed, setIsCompressed] = useState(true); // default to compressed
    const [contentRect, setContentRect] = useState<DOMRect | null>(null);
    const [isPDFReady, setIsPDFReady] = useState(false);

    useEffect(() => { // update state from URL params
        // check URL params
        const params = new URLSearchParams(window.location.search);

        // set states from URL if present
        const theme = params.get('theme');
        const version = params.get('version');
        const compressed = params.get('compressed');

        if (theme) {
            setIsDarkMode(theme === 'dark');
        } else if (window.__REACT_THEME__) {
            // fall back to window theme if no URL param
            setIsDarkMode(window.__REACT_THEME__ === 'dark');
        }
        if (version) {
            setIsFullResume(version === 'full');
        }
        if (compressed) {
            setIsCompressed(compressed === 'true');
        }
    }, []); // run once on mount

    // init data
    const currentTheme: ThemeMode = isDarkMode ? 'dark' : 'light';
    const currentData = isFullResume ? resumeData : smallResumeData;
    const currentScale = isCompressed ? 2 : 5; // adjust scale (2 = compressed, 5 = raw)
    const toggleTheme = () => {
        setIsDarkMode(!isDarkMode);
    };
    const toggleResumeVersion = () => {
        setIsFullResume(!isFullResume);
    };
    const handleMeasure = (rect: DOMRect) => {
        setContentRect(rect);
        setIsPDFReady(true);
    };


    const generatePDFHandler = () => {
        if (isPDFReady && targetRef.current && contentRect) {
            const pdfFileName = `${isCompressed ? 'compressed' : 'raw'}-${isFullResume ? 'full' : 'min'}-${isDarkMode ? 'dark' : 'light'}-resume.pdf`;
            generatePDF(targetRef.current, currentData, pdfFileName, {
                scale: currentScale,
                compress: isCompressed, // compress pdf
                linkYOffset: 18, // link offset to align clickable area with text (larger = lower)
                //debug: true, // set to true to show red link bounding boxes in PDF
            })
                .then(() => console.log("PDF generated successfully"))
                .catch((error: Error) => console.error("Error generating PDF: ", error));
        }
    };

    const generateAllPDFs = async () => { // generate all PDFs with Ctrl/Cmd + Shift + P
        if (!isPDFReady || !targetRef.current || !contentRect) return;

        const configs = [ // format combinations to generate
            { isDark: true, isFull: true, isCompressed: true },
            { isDark: false, isFull: true, isCompressed: true },
            { isDark: true, isFull: false, isCompressed: true },
            { isDark: false, isFull: false, isCompressed: true }
        ];

        // store original states
        const originalStates = {
            isDark: isDarkMode,
            isFull: isFullResume,
            isCompressed: isCompressed
        };

        try { // generate each PDF variant
            for (const config of configs) {
                // update states
                setIsDarkMode(config.isDark);
                setIsFullResume(config.isFull);
                setIsCompressed(config.isCompressed);

                // wait for render
                await new Promise(resolve => setTimeout(resolve, 100));

                // generate PDF
                generatePDFHandler();
            }

        } catch (error) {
            console.error("Error generating PDFs: ", error);
        } finally { // restore original states
            setIsDarkMode(originalStates.isDark);
            setIsFullResume(originalStates.isFull);
            setIsCompressed(originalStates.isCompressed);
        }
    };


    return (
        <div className={currentTheme}>
            <Controls
                isDarkMode={isDarkMode}
                isFullResume={isFullResume}
                isCompressed={isCompressed}
                toggleTheme={toggleTheme}
                toggleResumeVersion={toggleResumeVersion}
                setIsCompressed={setIsCompressed}
                generatePDFHandler={generatePDFHandler}
                isPDFReady={isPDFReady}
                generateAllPDFs={generateAllPDFs}
            />

            <div ref={targetRef} id="resume-container">
                <ResumeMeasureWrapper
                    theme={currentTheme}
                    onMeasure={handleMeasure}
                    data={currentData}
                />
            </div>
        </div>
    );
};

export default App;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\ResumeMeasureWrapper.tsx
File type: .tsx
import React, { useRef, useEffect } from 'react';
import { ThemeMode } from './utils/themeStyles';
import { ResumeData } from '../types/resume';
import Resume from './resume/Resume';

interface ResumeMeasureWrapperProps {
    theme: ThemeMode;
    onMeasure: (rect: DOMRect) => void;
    data: ResumeData;
}


const ResumeMeasureWrapper: React.FC<ResumeMeasureWrapperProps> = ({ 
        theme,
        onMeasure,
        data 
    }) => {
    const wrapperRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const measureResume = () => {
            if (wrapperRef.current) {
                const rect = wrapperRef.current.getBoundingClientRect();
                onMeasure(rect);
            }
        };

        // initial measurement
        measureResume();

        // add resize listener
        window.addEventListener('resize', measureResume);

        // set up mutation observer for content changes
        const observer = new MutationObserver(measureResume);
        if (wrapperRef.current) {
            observer.observe(wrapperRef.current, { 
                childList: true, 
                subtree: true,
                characterData: true,
                attributes: true 
            });
        }

        // cleanup
        return () => {
            window.removeEventListener('resize', measureResume);
            observer.disconnect();
        };
    }, [onMeasure]); // no need for data dependency as it's handled by React's reconciliation

    return (
        <div
            ref={wrapperRef}
            style={{
                width: 'fit-content',
                margin: '0 auto',
                padding: '0'
            }}
        >
            <Resume theme={theme} data={data} />
        </div>
    );
};

export default ResumeMeasureWrapper;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\AdditionalQualifications.tsx
File type: .tsx
import React from 'react';
import { Award } from 'lucide-react';
import ResumeSection from './Section';
import { AdditionalQualification } from '../../types/resume';
import { ThemeMode } from '../utils/themeStyles';

interface AdditionalQualificationsSectionProps {
    qualifications: AdditionalQualification[];
    theme: ThemeMode;
}


const AdditionalQualificationsSection: React.FC<AdditionalQualificationsSectionProps> = ({
    qualifications,
    theme
}) => (
    <ResumeSection title="Additional Qualifications" icon={Award}>
        <ul className="list-inside">
            {qualifications.map((qual, index) => (
                <li key={index}>
                    <span className="bold">{qual.category}</span>:{' '}
                    {qual.items.map((item, idx) => (
                        <span key={idx}>
                            {item.name}
                            {item.level && ` (${item.level})`}
                            {item.issuer && ` - ${item.issuer}`}
                            {idx < qual.items.length - 1 ? '; ' : ''}
                        </span>
                    ))}
                </li>
            ))}
        </ul>
    </ResumeSection>
);

export default AdditionalQualificationsSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Education.tsx
File type: .tsx
import React from 'react';
import { GraduationCap } from 'lucide-react';
import ResumeSection from './Section';
import { Education as EducationType } from '../../types/resume';
import { ThemeMode } from '../utils/themeStyles';

interface EducationSectionProps {
    education: EducationType[];
    theme: ThemeMode;
}


const EducationSection: React.FC<EducationSectionProps> = ({ education, theme }) => (
    <ResumeSection title="Education" icon={GraduationCap}>
        {education.map((edu, index) => (
            <div key={index} className={index > 0 ? 'mt-4' : ''}>
                <h3 className="text-lg font-semibold">{edu.institution}</h3>
                {edu.degrees.map((degree, idx) => (
                    <p key={idx} className="italic">{degree}</p>
                ))}
                <p>{edu.graduation} | GPA: {edu.gpa}</p>
                {edu.honors.length > 0 && (
                    <p>{edu.honors.join('; ')}</p>
                )}
                <ul className="list-inside mt-2">
                    {edu.coursework.map((category, idx) => (
                        <li key={idx}>
                            <span className="bold">{category.category}</span>:{' '}
                            {category.courses.join('; ')}
                        </li>
                    ))}
                </ul>
            </div>
        ))}
    </ResumeSection>
);

export default EducationSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Experience.tsx
File type: .tsx
import React from 'react';
import { Briefcase } from 'lucide-react';
import ResumeSection from './Section';
import { Experience as ExperienceType } from '../../types/resume';
import { ThemeMode } from '../utils/themeStyles';

interface ExperienceSectionProps {
    experience: ExperienceType[];
    theme: ThemeMode;
}


const ExperienceSection: React.FC<ExperienceSectionProps> = ({ experience, theme }) => (
    <ResumeSection title="Experience" icon={Briefcase}>
        {experience.map((exp, index) => (
            <div key={index} className={index > 0 ? 'mt-3' : ''}>
                <h3 className="text-lg font-semibold">{exp.company}</h3>
                <p className="italic">{exp.role}</p>
                {exp.department && (
                    <p className="italic">{exp.department}</p>
                )}
                <p>{exp.duration} | {exp.location}</p>
                <ul className="list-inside mt-2">
                    {exp.achievements.map((achievement, idx) => (
                        <li key={idx}>
                            <span className="bold">{achievement.action}</span>{' '}
                            {achievement.description}
                            {achievement.metrics && (
                                <span className="bold italic">
                                    {' '}{achievement.metrics}
                                </span>
                            )}
                        </li>
                    ))}
                </ul>
            </div>
        ))}
    </ResumeSection>
);

export default ExperienceSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\index.ts
File type: .ts
export { default as AdditionalQualificationsSection } from './AdditionalQualifications';
export { default as EducationSection } from './Education';
export { default as ExperienceSection } from './Experience';
export { default as ProjectsSection } from './Projects';
export { default as PublicationsSection } from './Publications';
export { default as SkillsSection } from './Skills';
export { default as ResumeSection } from './Section';

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Projects.tsx
File type: .tsx
import React from 'react';
import { Code } from 'lucide-react';
import ResumeSection from './Section';
import { Project as ProjectType } from '../../types/resume';
import { ThemeMode } from '../utils/themeStyles';

interface ProjectsSectionProps {
    projects: ProjectType[];
    theme: ThemeMode;
}


const ProjectsSection: React.FC<ProjectsSectionProps> = ({ projects, theme }) => (
    <ResumeSection title="Projects" icon={Code}>
        {projects.map((project, index) => (
            <div key={index}>
                <h3 className="font-semibold">
                    {project.name} {project.isActive && '(active)'} | {project.role}
                </h3>
                <ul className="list-inside mt-2">
                    {project.description.map((desc, idx) => (
                        <li key={idx}>{desc}</li>
                    ))}
                    {project.achievements.map((achievement, idx) => (
                        <li key={`achievement-${idx}`}>
                            <span className="bold">
                                {achievement.type === 'award' && 'Award: '}
                                {achievement.type === 'recognition' && 'Recognition: '}
                            </span>
                            {achievement.description}
                        </li>
                    ))}
                    {project.technologies && (
                        <li>
                            <span className="bold">Technologies: </span>
                            {project.technologies.join(', ')}
                        </li>
                    )}
                </ul>
            </div>
        ))}
    </ResumeSection>
);

export default ProjectsSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Publications.tsx
File type: .tsx
import React from 'react';
import { Book } from 'lucide-react';
import ResumeSection from './Section';
import { Publication as PublicationType } from '../../types/resume';
import { ThemeMode, getThemeStyles } from '../utils/themeStyles';

interface PublicationsSectionProps {
    publications: PublicationType[];
    theme: ThemeMode;
}


const PublicationsSection: React.FC<PublicationsSectionProps> = ({ publications, theme }) => {
    const themeStyles = getThemeStyles(theme);

    return (
        <ResumeSection title="Publications" icon={Book}>
            <ul className="list-inside">
                {publications.map((pub, index) => (
                    <li key={index}>
                        <a 
                            href={pub.url}
                            className="hover:underline italic"
                            style={{ color: themeStyles.link }}
                        >
                            {pub.title}
                        </a>
                        , published at {pub.venue}, {pub.year}
                    </li>
                ))}
            </ul>
        </ResumeSection>
    );
};

export default PublicationsSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Resume.tsx
File type: .tsx
import React from 'react';
import { ResumeData } from '../../types/resume';
import { ThemeMode, getThemeStyles } from '../utils/themeStyles';
import {
  EducationSection,
  ExperienceSection,
  ProjectsSection,
  SkillsSection,
  PublicationsSection,
  AdditionalQualificationsSection,
} from './index';

interface ResumeProps {
    data: ResumeData;
    theme: ThemeMode;
}


const Resume: React.FC<ResumeProps> = ({ data, theme }) => {
    const themeStyles = getThemeStyles(theme);
    const {
        personalInfo, education, experience,
        projects, skills, publications,
        additionalQualifications
    } = data;

    return (
        <div
            className="max-w-5xl mx-auto p-8 shadow-lg"
            style={{
                backgroundColor: themeStyles.background,
                color: themeStyles.text,
                ...({ "--bullet-color": themeStyles.bullet } as React.CSSProperties),
            }}
        >
            <style>
            {`
                .bold {
                    font-weight: bold;
                }
                ul {
                    list-style: none;
                    padding-left: 1.5em;
                }
                ul li {
                    position: relative;
                    margin-bottom: 0.5em;
                }
                ul li::before {
                    content: '';
                    position: absolute;
                    left: -1.5em;
                    top: 0.84em;
                    width: 6px;
                    height: 6px;
                    background-color: ${themeStyles.bullet};
                    border-radius: 50%;
                    transform: translateY(-50%);
                }
                ul ul li::before {
                    background-color: transparent;
                    border: 1px solid ${themeStyles.bullet};
                }
            `}
            </style>

            <header className="text-center mb-8">
                <h1 className="text-3xl font-bold mb-2">{personalInfo.name}</h1>
                <p className="text-sm">
                    <a 
                        href={`mailto:${personalInfo.email}`} 
                        style={{ color: themeStyles.link }} 
                        className="hover:underline"
                    >
                        {personalInfo.email}
                    </a> | {personalInfo.phone} | {personalInfo.location}
                    {personalInfo.clearance && ` | ${personalInfo.clearance}`} |{' '}
                    {personalInfo.links.map((link, index) => (
                        <React.Fragment key={link.url}>
                            <a
                                href={link.url}
                                style={{ color: themeStyles.link }}
                                className="hover:underline"
                            >
                                {link.type.charAt(0).toUpperCase() + link.type.slice(1)}
                            </a>
                            {index < personalInfo.links.length - 1 ? ' | ' : ''}
                        </React.Fragment>
                    ))}
                </p>
            </header>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-14">
                <div>
                    <EducationSection
                        education={education}
                        theme={theme}
                    />
                    <PublicationsSection
                        publications={publications}
                        theme={theme}
                    />
                    <ProjectsSection
                        projects={projects}
                        theme={theme}
                    />
                    <SkillsSection
                        skills={skills}
                        theme={theme}
                    />
                </div>
                <div>
                    <ExperienceSection
                        experience={experience}
                        theme={theme}
                    />
                    <AdditionalQualificationsSection
                        qualifications={additionalQualifications}
                        theme={theme}
                    />
                </div>
            </div>
        </div>
    );
};

export default Resume;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Section.tsx
File type: .tsx
import React, { ReactNode } from 'react';
import { LucideIcon } from 'lucide-react';

interface ResumeSectionProps {
    title: string;
    icon: LucideIcon;
    children: ReactNode;
    className?: string;
}


const ResumeSection: React.FC<ResumeSectionProps> = ({ 
    title,
    icon: Icon,
    children,
    className = ""
}) => (
    <div className={`mb-4 ${className}`}>
        <h2 className="text-xl font-bold mb-2 flex items-center">
            <span className="icon mr-2 flex items-center justify-center" style={{ width: '1.5em', height: '1.5em' }}>
                <Icon size={25} />
            </span>
            <span>{title}</span>
        </h2>
        {children}
    </div>
);

export default ResumeSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\resume\Skills.tsx
File type: .tsx
import React from 'react';
import { Wrench } from 'lucide-react';
import ResumeSection from './Section';
import { Skill as SkillType } from '../../types/resume';
import { ThemeMode } from '../utils/themeStyles';

interface SkillsSectionProps {
    skills: SkillType[];
    theme: ThemeMode;
}


const SkillsSection: React.FC<SkillsSectionProps> = ({ skills, theme }) => (
    <ResumeSection title="Skills" icon={Wrench}>
        <ul className="list-inside">
            {skills.map((skillGroup, index) => (
                <li key={index}>
                    <span className="bold">{skillGroup.category}</span>:{' '}
                    {skillGroup.primary.join(', ')}
                    {skillGroup.secondary && (
                        <ul className="list-inside ml-4">
                            <li>
                                Familiar: {skillGroup.secondary.join(', ')}
                            </li>
                        </ul>
                    )}
                </li>
            ))}
        </ul>
    </ResumeSection>
);

export default SkillsSection;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\utils\Controls.tsx
File type: .tsx
import React, { useEffect } from 'react';
import { Sun, Moon, Maximize2, Minimize2, Shrink, Expand, FileDown } from 'lucide-react';

interface ControlsProps {
    isDarkMode: boolean;
    isFullResume: boolean;
    isCompressed: boolean;
    toggleTheme: () => void;
    toggleResumeVersion: () => void;
    setIsCompressed: (compressed: boolean) => void;
    generatePDFHandler: () => void;
    isPDFReady: boolean;
    generateAllPDFs?: () => void;
}


const Controls: React.FC<ControlsProps> = ({ 
    isDarkMode,
    isFullResume,
    isCompressed,
    toggleTheme,
    toggleResumeVersion,
    setIsCompressed,
    generatePDFHandler,
    isPDFReady,
    generateAllPDFs,
}) => {
    useEffect(() => { // keyboard shortcut to generate all PDFs
        const handleKeyPress = (e: KeyboardEvent) => { // Ctrl/Cmd + Shift + P
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'P') {
                e.preventDefault(); // prevent browser print dialog
                generateAllPDFs?.();
            }
        };

        window.addEventListener('keydown', handleKeyPress);
        return () => window.removeEventListener('keydown', handleKeyPress);
    }, [generateAllPDFs]);


    return (
        <div className="w-full flex justify-end px-6 py-4">
            <div className="flex items-center space-x-8">
                {/* Theme Toggle */}
                <div className="flex flex-col items-center">
                    <button
                        className="relative w-20 h-10 rounded-full p-1 bg-gray-100 dark:bg-gray-800 transition-colors duration-200 ease-in-out"
                        onClick={toggleTheme}
                        aria-label={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}
                    >
                        <div
                            className={`absolute top-1 left-1 flex items-center justify-center w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 transform transition-transform duration-200 ease-in-out ${
                                isDarkMode ? 'translate-x-10' : 'translate-x-0'
                            }`}
                        >
                            {isDarkMode ? (
                                <Moon size={18} className="text-gray-100" />
                            ) : (
                                <Sun size={18} className="text-gray-800" />
                            )}
                        </div>
                    </button>
                    <span className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        {isDarkMode ? 'Dark' : 'Light'} Theme
                    </span>
                </div>

                {/* Resume Content Toggle */}
                <div className="flex flex-col items-center">
                    <button
                        className="relative w-20 h-10 rounded-full p-1 bg-gray-100 dark:bg-gray-800 transition-colors duration-200 ease-in-out"
                        onClick={toggleResumeVersion}
                        aria-label={`Currently showing ${isFullResume ? 'full' : 'condensed'} resume`}
                    >
                        <div
                            className={`absolute top-1 left-1 flex items-center justify-center w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 transform transition-transform duration-200 ease-in-out ${
                                isFullResume ? 'translate-x-10' : 'translate-x-0'
                            }`}
                        >
                            {isFullResume ? (
                                <Maximize2 size={18} className="text-gray-800 dark:text-gray-100" />
                            ) : (
                                <Minimize2 size={18} className="text-gray-800 dark:text-gray-100" />
                            )}
                        </div>
                    </button>
                    <span className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        {isFullResume ? 'Full' : 'Min'} Resume
                    </span>
                </div>

                {/* Compression Toggle */}
                <div className="flex flex-col items-center">
                    <button
                        className="relative w-20 h-10 rounded-full p-1 bg-gray-100 dark:bg-gray-800 transition-colors duration-200 ease-in-out"
                        onClick={() => setIsCompressed(!isCompressed)}
                        aria-label={`Currently ${isCompressed ? 'compressed' : 'uncompressed'} PDF`}
                    >
                        <div
                            className={`absolute top-1 left-1 flex items-center justify-center w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 transform transition-transform duration-200 ease-in-out ${
                                isCompressed ? 'translate-x-0' : 'translate-x-10'
                            }`}
                        >
                            {isCompressed ? (
                                <Shrink size={18} className="text-gray-800 dark:text-gray-100" />
                            ) : (
                                <Expand size={18} className="text-gray-800 dark:text-gray-100" />
                            )}
                        </div>
                    </button>
                    <span className="text-sm text-gray-600 dark:text-gray-400 mt-1 min-w-[110px] text-center">
                        {isCompressed ? 'Compressed' : 'Raw'} PDF
                    </span>
                </div>

                {/* Download Button */}
                <div className="flex flex-col items-center">
                    <button
                        className="relative w-11 h-11 flex items-center justify-center bg-gray-300 hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-800 dark:text-gray-100 rounded-full transition-colors duration-200 ease-in-out"
                        onClick={generatePDFHandler}
                        disabled={!isPDFReady}
                        aria-label="Download Resume PDF"
                    >
                        <FileDown size={25} />
                    </button>
                    <span className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        Download
                    </span>
                </div>
            </div>
        </div>
    );
};

export default Controls;

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\utils\customPDFGenerator.ts
File type: .ts
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { ResumeData } from '../../types/resume';

interface PDFGeneratorOptions {
    scale?: number;
    debug?: boolean;
    compress?: boolean;
    linkYOffset?: number;
}

interface LinkRect {
    x: number;
    y: number;
    width: number;
    height: number;
    url: string;
}

const DEFAULT_OPTIONS: PDFGeneratorOptions = {
    scale: 2, // render scale for html2canvas
    compress: false, // set to true to compress PDF output
    linkYOffset: 10, // helps align link bounding box with text (larger = lower)
    debug: false, // set to true to show red link bounding boxes in PDF
};


/**
 * Recursively find all <a> elements, compute link bounding boxes
 * relative to 'element' (the cloned container), and expand the bounding
 * box on all sides by a few units for better clickability.
 */
async function findLinkPositions(
    element: HTMLElement,
    scale: number,
    linkYOffset: number,
    boxPadding = 6 // padding around link bounding boxes
): Promise<LinkRect[]> {
    const links: LinkRect[] = [];
    const containerRect = element.getBoundingClientRect();

    function processNode(node: Element) {
        if (node.tagName === 'A') {
            const anchor = node as HTMLAnchorElement;
            const rect = anchor.getBoundingClientRect();

            // 1. convert DOM rect to PDF coordinates (scaled)
            // 2. subtract container's top/left to get local coordinates
            // 3. expand the bounding box slightly on all sides
            // 4. add y-offset to align bounding boxes with text more accurately
            links.push({
                x: (rect.left - containerRect.left)*scale - boxPadding,
                y: (rect.top - containerRect.top)*scale + linkYOffset - boxPadding,
                width: rect.width * scale + 2*boxPadding,
                height: rect.height * scale + 2*boxPadding,
                url: anchor.href,
            });
        }

        // 5. recurse into children if any
        node.childNodes.forEach((child) => {
            if (child.nodeType === Node.ELEMENT_NODE) {
                processNode(child as Element);
            }
        });
    }

    processNode(element);
    return links;
}

/**
 * Add style overrides to the cloned element to fix bullet
 * and icon positioning for consistent PDF rendering.
 */
function adjustIconsAndBullets(clonedElement: HTMLElement) {
    const style = document.createElement('style');
    style.textContent = `
            /* Scope everything to #resume-container-clone to avoid polluting original DOM */
            #resume-container-clone .icon {
                position: relative;
                top: 0.5em !important;
                margin-right: 0.5em !important;
            }
            #resume-container-clone ul {
                list-style: none !important;
                padding-left: 1.5em !important;
            }
            #resume-container-clone ul li {
                position: relative !important;
                margin-bottom: 0.5em !important;
            }
            #resume-container-clone ul li::before {
                content: '' !important;
                position: absolute !important;
                left: -1.5em !important;
                top: 1.3em !important; /* larger = lower relative to list item */
                width: 6px !important;
                height: 6px !important;
                border-radius: 50% !important;
                transform: translateY(-50%) !important;
            }
            #resume-container-clone {
                margin: 0 !important;
                padding: 0 !important;
                box-sizing: border-box !important;
            }
    `;
    clonedElement.appendChild(style);
}


/**
 * Main function to generate PDF with:
 *  - no automatic margins => no white borders
 *  - hidden ATS text layer
 *  - clickable links
 */
export async function generatePDF(
    element: HTMLElement,
    resumeData: ResumeData,
    filename: string,
    options: Partial<PDFGeneratorOptions> = {}
): Promise<void> {
    // 0. merge user options with defaults
    const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
    const { scale, debug, compress, linkYOffset } = mergedOptions;


    // 1. clone resume container so we can safely manipulate it
                            // without affecting the displayed DOM
    const clonedElement = element.cloneNode(true) as HTMLElement;
    clonedElement.id = 'resume-container-clone';

    // position the clone at top-left, no margin/padding, so everything
                                        // lines up exactly for html2canvas
    clonedElement.style.position = 'absolute';
    clonedElement.style.top = '0';
    clonedElement.style.left = '0';
    clonedElement.style.margin = '0';
    clonedElement.style.padding = '0';
    clonedElement.style.boxSizing = 'border-box';


    // 2. add an invisible ATS layer to the cloned element
        // hide it off-screen so it doesn't affect the layout
    const atsLayer = document.createElement('div');
    atsLayer.style.position = 'absolute';
    atsLayer.style.left = '-99999px';
    atsLayer.style.opacity = '0';
    atsLayer.style.pointerEvents = 'none';
    atsLayer.textContent = JSON.stringify(resumeData, null, 2);
    clonedElement.appendChild(atsLayer);


    // 3. append the cloned element to the document so it can be measured/rendered
    document.body.appendChild(clonedElement);


    // 4. adjust icons, bullets, etc. inside the clone only
    adjustIconsAndBullets(clonedElement);


    try {
        // 5. capture the entire cloned element with html2canvas
                    // rely on getBoundingClientRect for the size
        const rect = clonedElement.getBoundingClientRect();
        const effectiveScale = scale ?? 2; // default to 2x scale
        const canvas = await html2canvas(clonedElement, {
            scale: effectiveScale,
            useCORS: true,
            logging: false,
            width: rect.width,
            height: rect.height,
        });


        // 6. find link positions to make them clickable in PDF
                                // apply small y-offset if needed
        const linkPositions = await findLinkPositions(
            clonedElement,
            effectiveScale,
            linkYOffset ?? 2 // default to 2px offset
        );


        // 7. create the PDF exactly the same size as the rendered canvas
            // => no margins => no white borders
        const pdfWidth = canvas.width; // (px)
        const pdfHeight = canvas.height;// (px)
        const pdf = new jsPDF({
            orientation: 'portrait',
            unit: 'px',
            format: [pdfWidth, pdfHeight],
            compress: compress, // compress PDF output (optional)
        });


        // 8. insert the ATS text in a minuscule font so that it doesn't distract
                // if PDF readers show fallback text, placing behind the main image
        pdf.setFontSize(2);
        pdf.setTextColor(0, 0, 0);
        pdf.text(atsLayer.textContent || '', 1, 1);


        // 9. place the screenshot (PNG) on top [(0,0) => no border]
        pdf.addImage(
            canvas.toDataURL('image/png', 1.0),
            'PNG',
            0,
            0,
            pdfWidth,
            pdfHeight
        );


        // 10. debugging: draw red boxes around each link if debug is true
        if (debug) {
            pdf.setDrawColor(255, 0, 0);
            pdf.setLineWidth(2);
            linkPositions.forEach((link) => {
                pdf.rect(link.x, link.y, link.width, link.height);
            });
        }


        // 11. make links clickable
        linkPositions.forEach((link) => {
            pdf.link(link.x, link.y, link.width, link.height, {
                url: link.url,
            });
        });


        // 12. save PDF
        pdf.save(filename);
    }
    catch (err) {
        console.error('Error generating PDF:', err);
        throw err;
    } finally { // remove cloned element from the DOM to clean up
        document.body.removeChild(clonedElement);
    }
}

--------------------------------------------------
File End
--------------------------------------------------


.\src\components\utils\themeStyles.tsx
File type: .tsx
export type ThemeMode = 'light' | 'dark';

interface ThemeStyles {
  background: string;
  text: string;
  link: string;
  bullet: string;
}

export const themeConfig: Record<ThemeMode, ThemeStyles> = {
  light: {
    background: '#ffffff',
    text: '#000000',
    link: '#1a73e8',
    bullet: '#000000',
  },
  dark: {
    background: '#1a1a1a',
    text: '#f5f5f5',
    link: '#8ab4f8',
    bullet: '#f5f5f5',
  },
};

export const getThemeStyles = (theme: ThemeMode): ThemeStyles => themeConfig[theme];

--------------------------------------------------
File End
--------------------------------------------------


.\src\data\resumeData.ts
File type: .ts
import { ResumeData } from '../types/resume';

export const resumeData: ResumeData = {
    metadata: {
        version: "full",
        lastUpdated: "2025-01-23"
    },

    personalInfo: {
        name: "Ainesh Chatterjee",
        email: "ainesh.chatterjee@gmail.com",
        phone: "(301) 820-8957",
        location: "Rockville, MD",
        clearance: "Secret Clearance",
        links: [
            {
                type: "site",
                url: "https://ain3sh.com/",
            },
            {
                type: "linkedin",
                url: "https://www.linkedin.com/in/ain3sh/",
            },
            {
                type: "github",
                url: "https://github.com/GeneralCoder365",
            }
        ]
    },

    education: [
        {
            institution: "University of Maryland - College Park",
            degrees: [
                "Dual BS in Computer Science (Machine Learning&Quantum Information) and Mathematics"
            ],
            graduation: "December 2025",
            gpa: "3.5",
            honors: ["University, CS Departmental Honors; BS/MS; Dean's List"],
            coursework: [
                    {
                    category: "AI/ML",
                    courses: ["Intro to: AI, Data Science, ML; Graduate NLP"]
                    },
                    {
                    category: "Math",
                    courses: ["Calc III; Advanced Linear Algebra; Differential Equations",
                            "Advanced Calculus; Abstract Algebra",
                            "Mathematical Finance: Derivatives & Stochastic Models"]
                    },
                    {
                    category: "CS",
                    courses: ["Algorithms; Data Structures; Computer Systems; Object-Oriented Programming; Organization of Languages"]
                    },
                    {
                    category: "Stat",
                    courses: ["Applied Prob&Stat; Probability Theory"]
                    }
                ]
        },
    ],

    experience: [
        {
            company: "Johns Hopkins University Applied Physics Laboratory",
            role: "Computer Science Intern",
            department: "Force Projection Sector: Ocean Systems & Engineering Group",
            location: "Laurel, MD",
            duration: "May 2024 - Aug 2024",
            achievements: [
                {
                action: "Implemented",
                description: "iteratively enhanced Generative Adversarial Imitation from Observation (GAIfO) agents",
                metrics: "substantially outperforming baseline imitation models"
                },
                {
                action: "Authored",
                description: "critical literature reviews on GAIfO and Generative AI, providing",
                metrics: "direct insights for future project strategies"
                },
                {
                action: "Developed",
                description: "an optimized GAIfO variant, using core-architectural insights from a literature review, which outperformed all prior versions over long timeframes"
                },
                {
                action: "Enhanced",
                description: "GTRI's SCRIMMAGE mass-simulation framework with increased complexity and expert controller functionality"
                },
                {
                action: "Revamped",
                description: "GitLab Continuous Integration pipelines, boosting speed and efficiency by",
                metrics: "25% while addressing security vulnerabilities"
                },
                {
                action: "Optimized",
                description: "project-wide Docker Image, used across all repositories, reducing pipeline build times by",
                metrics: "50% and increasing memory efficiency by 40%"
                },
                {
                action: "Led",
                description: "winning team for sector Intern Challenge in developing a secure, non-GPS intra-campus navigation prototype"
                }
            ]
        },
        {
            company: "University of Maryland MIND Lab",
            role: "Research Intern",
            department: "Breathing Analysis Project",
            location: "College Park, MD",
            duration: "October 2023 - December 2024",
            achievements: [
                {
                action: "Developed",
                description: "an advanced visualization dashboard for efficient analysis of mass breath data"
                },
                {
                action: "Designed",
                description: "dataset structures for visualization and feature extraction in future work"
                },
                {
                action: "Optimized",
                description: "massive dataset-loading using Dask and multithreading by over",
                metrics: "400%"
                },
                {
                action: "Implemented",
                description: "and evaluated supervised learning techniques for improved breath segmentation"
                }
            ]
        },
        {
            company: "University of Maryland CMNS",
            role: "Student Researcher",
            department: "Crowd Simulation",
            location: "College Park, MD",
            duration: "September 2024 - Present",
            achievements: [
                    {
                    action: "Exploring",
                    description: "application of non-Euclidean geometries"
                    },
                    {
                    action: "Applying",
                    description: "Transformers to crowd navigation, with focus on natural language goal-direction"
                    }
            ]
        },
        {
            company: "University of Maryland CMNS",
            role: "Lead Teaching Assistant",
            department: "CMSC351H (Algorithms Honors)",
            location: "College Park, MD",
            duration: "Spring 2024",
            achievements: [
                {
                action: "Co-designed and graded",
                description: "homeworks, exams, and lecture material for 38 honours students"
                },
                {
                action: "Conducted",
                description: "weekly office hours, providing personalized guidance on advanced topics"
                }
            ]
        }
    ],

    projects: [
        {
            name: "Vizier",
            role: "Team Lead/ML Developer",
            isActive: true,
            description: [
                "AI-powered platform for personalized newsletters",
                "(Full Pipeline: Content Aggregation → Monetization)",
                "Test-Time MoE agentic architecture for improved context retrieval via specialized document-expert LLM models"
            ],
            achievements: []
        },
        {
            name: "QSafe",
            role: "Solo Developer",
            isActive: true,
            description: [
                "Open-Source Python/Rust Quantum-Safe password manager with lattice-based cryptography",
                "Secure Docker container core manager",
                "End-to-end encrypted CLI-container comm protocol"
            ],
            achievements: []
        },
        {
            name: "CoronaSafe",
            role: "Team Lead/Backend Developer",
            isActive: false,
            description: [
                "Python/Flutter app for global COVID-19 risk assessment",
                "Analyzed real-time foot traffic and urban density using a time-weighted algorithm for predictive accuracy"
            ],
            achievements: [
                {
                type: "award",
                description: "Congressional App Challenge Winner: 2021 District MD08"
                },
                {
                type: "recognition",
                description: "Guest Speaker at 2022 US Patent and Trademark Office APPLY Yourself event"
                }
            ]
        },
        {
            name: "Resourceful",
            role: "Team Lead/Backend Developer",
            isActive: false,
            description: [
                "Python/Flutter app that connected underrepresented students to resources using NLP-driven searches",
                "Implemented advanced NLP techniques (e.g. NLTK, Spacy, and Cosine/Wu-Palmer similarities)"
            ],
            achievements: [
                {
                type: "award",
                description: "Best Education Award: 2022 Blairhacks_5 Hackathon"
                }
            ]
        }
    ],

    skills: [
        {
            category: "Programming",
            primary: ["Python", "C/C++", "DevOps", "Webhosting", "Fullstack Development", "API-creation", "Design Paradigms"],
            secondary: ["Java", "Rust", "Lua", "MATLAB", "Flutter/Dart", "HTML5", "CSS3", "JavaScript", "Assembly"]
        },
        {
            category: "ML/AI",
            primary: ["Un/Supervised Learning", "Deep RL", "GANs"]
        },
        {
            category: "Data Science",
            primary: ["Statistical Analysis", "Data Processing"]
        },
        {
            category: "Finance",
            primary: ["Brownian Motion", "Black-Scholes", "Arbitrage Pricing", "Stochastic Calculus", "Delta Hedging"]
        },
        {
            category: "Tools & Technologies",
            primary: [
                "Git", "GitHub/Lab", "Docker", "SQL", "Linux", "Bash", "WSL2",
                "PyTorch", "NumPy", "Pandas", "NLTK", "Dask", "Scipy", "Plotly",
                "Matplotlib", "Spacy", "Scikit-learn", "Seaborn", "TensorBoard",
                "AWS SageMaker", "BeautifulSoup", "React", "Flask", "RESTful",
                "Postman", "Selenium", "ROS", "LaTeX", "Powershell", "Memory Profiler"
            ]
        },
        {
            category: "Soft Skills",
            primary: ["First-Principles Problem Solving", "Leadership", "Technical Writing", "Self-teaching", "Iterative Experimentation"]
        }
    ],

    publications: [
        {
            title: "Ipelets for the Convex Polygonal Geometry",
            url: "https://doi.org/10.4230/LIPIcs.SoCG.2024.92",
            venue: "SoCG 2024",
            year: "2024"
        },
        {
            title: "AgreeMate: Teaching LLMs to Haggle",
            url: "https://arxiv.org/abs/2412.18690",
            venue: "arXiv",
            year: "2024"
        },
    ],

    additionalQualifications: [
        {
            category: "Certifications",
            items: [
                {
                name: "Complete Linear Algebra",
                issuer: "Udemy"
                },
                {
                name: "Algorithmic Toolbox",
                issuer: "UCSD"
                },
                {
                name: "Game Theory",
                issuer: "Stanford"
                }
            ]
        },
        {
            category: "Awards",
            items: [
                { name: "National Merit" },
                { name: "Dean's Scholarship" },
                { name: "Eagle Scout" },
                { name: "Congressional App Challenge Winner" },
                { name: "ISKF Black Belt" }
            ]
        },
        {
            category: "Languages",
            items: [
                { name: "English", level: "Native" },
                { name: "Bengali", level: "Native" },
                { name: "Hindi", level: "Intermediate" },
                { name: "Spanish", level: "Intermediate" },
                { name: "French", level: "Beginner" }
            ]
        }
    ],
};

export default resumeData;

--------------------------------------------------
File End
--------------------------------------------------


.\src\data\smallResumeData.ts
File type: .ts
import { ResumeData } from '../types/resume';

export const smallResumeData: ResumeData = {
    metadata: {
        version: "condensed",
        lastUpdated: "2025-01-23"
    },

    personalInfo: {
        name: "Ainesh Chatterjee",
        email: "ainesh.chatterjee@gmail.com",
        phone: "(301) 820-8957",
        location: "Rockville, MD",
        links: [
            {
                type: "site",
                url: "https://ain3sh.com/",
            },
            {
                type: "linkedin",
                url: "https://www.linkedin.com/in/ain3sh/",
            },
            {
                type: "github",
                url: "https://github.com/GeneralCoder365",
            }
        ]
    },

    education: [
        {
            institution: "University of Maryland (College Park)",
            degrees: [
                "Dual BS in Computer Science (Machine Learning+Quantum Information) and Mathematics"
            ],
            graduation: "December 2025",
            gpa: "3.5",
            honors: ["University + CS Departmental Honors, Dean's List"],
            coursework: [
                {
                category: "AI/ML",
                courses: ["Intro to: AI, Data Science, ML, Graduate NLP"]
                },
                {
                category: "Math",
                courses: ["Calculus III, Advanced Linear Algebra, Differential Equations, Abstract Algebra, Financial Modeling"]
                },
                {
                category: "CS",
                courses: ["Algorithms, Data Structures, Computer Systems, OOP, Programming Languages"]
                },
                {
                category: "Stat",
                courses: ["Applied Prob&Stat, Probability Theory"]
                }
            ]
        }
    ],

    experience: [
        {
            company: "Johns Hopkins University Applied Physics Laboratory",
            role: "Computer Science Intern",
            department: "Force Projection Sector: KMT Group",
            location: "Laurel, MD",
            duration: "May 2024 - Aug 2024",
            achievements: [
                {
                action: "Developed",
                description: "Generative Adversarial Imitation from Observation (GAIfO) agents, outperforming baseline models"
                },
                {
                action: "Authored",
                description: "literature reviews on GAIfO and Generative AI, shaping project strategies"
                },
                {
                action: "Enhanced",
                description: "SCRIMMAGE simulation framework with advanced controller functionalities"
                },
                {
                action: "Revamped",
                description: "GitLab CI pipelines, boosting efficiency by",
                metrics: "25% and improving security"
                },
                {
                action: "Optimized",
                description: "core Docker Image, reducing build times by",
                metrics: "50% and increasing memory efficiency by 40%"
                },
                {
                action: "Led",
                description: "winning team for the sector-wide Intern Challenge, in developing a prototype secure, non-GPS intra-campus navigation system"
                }
            ]
        },
        {
            company: "University of Maryland MIND Lab",
            role: "Data Science/ML Research Intern",
            department: "Breathing Analysis Project",
            location: "College Park, MD",
            duration: "Fall 2023 - Present",
            achievements: [
                {
                action: "Created",
                description: "a visualization dashboard for mass breath data analysis, and optimized dataset loading by over",
                metrics: "400%"
                },
                {
                action: "Implemented",
                description: "supervised learning techniques to enhance breath segmentation accuracy"
                }
            ]
        },
        {
            company: "University of Maryland CMNS",
            role: "Lead Teaching Assistant",
            department: "CMSC351H (Algorithms Honors)",
            location: "College Park, MD",
            duration: "Spring 2024",
            achievements: [
                {
                action: "Co-designed and graded",
                description: "homeworks, exams, and lecture material for 38 honours students"
                },
                {
                action: "Conducted",
                description: "weekly office hours, providing personalized guidance on advanced topics"
                }
            ]
        }
    ],

    projects: [
        {
            name: "CoronaSafe",
            role: "Team Lead/Developer",
            isActive: false,
            description: [
                "Python/Flutter app for global COVID-19 risk assessment",
                "Won the 2021 Congressional App Challenge for district MD08",
                "Analyzed real-time foot traffic and urban density using a novel time-weighted algorithm for predictive accuracy",
                "Featured as a guest speaker at the US Patent and Trademark Office's 2022 APPLY Yourself event"
            ],
            achievements: []
        },
        {
            name: "Resourceful",
            role: "Team Lead/Developer",
            isActive: false,
            description: [
                "Python/Flutter app that connected underrepresented students to resources using NLP-driven searches",
                "Won the Best Education Award at the 2022 Blairhacks_5 Hackathon",
                "Implemented advanced NLP techniques including NLTK, Spacy, and Cosine/Wu-Palmer similarities"
            ],
            achievements: []
        }
    ],

    skills: [
        {
        category: "Programming",
        primary: ["Python", "Java", "C/C++", "Fullstack Development", "DevOps", "API Design"]
        },
        {
        category: "ML/AI",
        primary: ["Un/Supervised Learning", "Deep RL", "GANs"]
        },
        {
        category: "Data Science",
        primary: ["Statistical Analysis", "Data Structures", "Algorithms", "Data Processing"]
        },
        {
        category: "Finance",
        primary: ["Black-Scholes", "Stochastic Calculus", "Arbitrage Pricing"]
        },
        {
        category: "Tools & Technologies",
        primary: ["Git", "Docker", "CI/CD", "Linux", "PyTorch", "Flask", "REST APIs", "NumPy", "Pandas"]
        },
        {
        category: "Soft Skills",
        primary: ["Research", "Technical Writing", "Problem-Solving", "Team Leadership"]
        }
    ],

    publications: [
        {
            title: "Ipelets for the Convex Polygonal Geometry",
            url: "https://doi.org/10.4230/LIPIcs.SoCG.2024.92",
            venue: "SoCG 2024",
            year: "2024"
        },
        {
            title: "AgreeMate: Teaching LLMs to Haggle",
            url: "https://arxiv.org/abs/2412.18690",
            venue: "arXiv",
            year: "2024"
        },
    ],

    additionalQualifications: [
        {
            category: "Certifications",
            items: [
                {
                name: "Complete Linear Algebra",
                issuer: "Udemy"
                },
                {
                name: "Algorithmic Toolbox",
                issuer: "UCSD"
                },
                {
                name: "Game Theory",
                issuer: "Stanford"
                }
            ]
        },
        {
            category: "Awards",
            items: [
                { name: "National Merit Scholarship" },
                { name: "Dean's Scholarship" },
                { name: "Eagle Scout" },
                { name: "Congressional App Challenge Winner" },
                { name: "ISKF Black Belt" }
            ]
        },
        {
            category: "Languages",
            items: [
                { name: "English", level: "Native" },
                { name: "Bengali", level: "Native" },
                { name: "Hindi", level: "Intermediate" },
                { name: "Spanish", level: "Intermediate" },
                { name: "French", level: "Beginner" }
            ]
        }
    ],
};

export default smallResumeData;

--------------------------------------------------
File End
--------------------------------------------------


.\src\types\resume.ts
File type: .ts
export interface ResumeData {
    personalInfo: PersonalInfo;
    education: Education[];
    experience: Experience[];
    projects: Project[];
    skills: Skill[];
    publications: Publication[];
    additionalQualifications: AdditionalQualification[];
    metadata: {
        version: 'full' | 'condensed';
        lastUpdated: string;
    };
}

export interface ResumeVersion {
    id: string;
    name: string;
    data: ResumeData;
}

export interface Education {
    institution: string;
    degrees: string[];
    graduation: string;
    gpa: string;
    honors: string[];
    coursework: {
        category: string;
        courses: string[];
    }[];
}

export interface Experience {
    company: string;
    role: string;
    department?: string;
    location: string;
    duration: string;
    achievements: {
        action: string;
        description: string;
        metrics?: string;
    }[];
}

export interface Project {
    name: string;
    role: string;
    isActive: boolean;
    description: string[];
    achievements: {
        type: 'award' | 'recognition' | 'metric';
        description: string;
    }[];
    technologies?: string[];
}

export interface Skill {
    category: string;
    primary: string[];
    secondary?: string[];
}

export interface Publication {
    title: string;
    url: string;
    venue: string;
    year: string;
}

export interface PersonalInfo {
    name: string;
    email: string;
    phone: string;
    location: string;
    clearance?: string;
    links: {
        type: 'site' | 'linkedin' | 'github' | 'other';
        url: string;
        label?: string;
    }[];
}

export interface AdditionalQualification {
    category: 'Certifications' | 'Awards' | 'Languages' | 'Other';
    items: {
        name: string;
        level?: string;
        issuer?: string;
    }[];
}

--------------------------------------------------
File End
--------------------------------------------------
